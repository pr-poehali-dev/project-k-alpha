import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { ScrollArea } from '@/components/ui/scroll-area';
import Icon from '@/components/ui/icon';
import { toast } from 'sonner';

interface Server {
  id: string;
  name: string;
  version: string;
  status: 'online' | 'offline' | 'starting';
  players: number;
  maxPlayers: number;
  plan: string;
  ip: string;
  build: string;
}

const Index = () => {
  const [servers, setServers] = useState<Server[]>([
    {
      id: '1',
      name: '–ú–æ–π —Å–µ—Ä–≤–µ—Ä –≤—ã–∂–∏–≤–∞–Ω–∏—è',
      version: '1.20.4',
      status: 'online',
      players: 3,
      maxPlayers: 2999,
      plan: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π',
      ip: 'mc.server-1.ru:25565',
      build: 'Vanilla'
    }
  ]);

  const [serverName, setServerName] = useState('');
  const [selectedVersion, setSelectedVersion] = useState('1.20.4');
  const [selectedBuild, setSelectedBuild] = useState('Vanilla');
  const [consoleOpen, setConsoleOpen] = useState(false);
  const [currentServerId, setCurrentServerId] = useState<string | null>(null);
  const [consoleCommand, setConsoleCommand] = useState('');
  const [consoleLog, setConsoleLog] = useState<string[]>([
    '[Server] Starting Minecraft server...',
    '[Server] Loading world...',
    '[Server] Server started successfully!',
    '[Server] Ready for players on port 25565'
  ]);

  const createServer = () => {
    if (!serverName.trim()) {
      toast.error('–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞!');
      return;
    }

    const newServer: Server = {
      id: Date.now().toString(),
      name: serverName,
      version: selectedVersion,
      status: 'starting',
      players: 0,
      maxPlayers: 2999,
      plan: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π',
      ip: `mc.server-${Date.now()}.ru:25565`,
      build: selectedBuild
    };

    setServers([...servers, newServer]);
    toast.success(`–°–µ—Ä–≤–µ—Ä "${serverName}" —Å–æ–∑–¥–∞—ë—Ç—Å—è!`);
    setServerName('');

    setTimeout(() => {
      setServers(prev => 
        prev.map(s => s.id === newServer.id ? { ...s, status: 'online' as const } : s)
      );
    }, 3000);
  };

  const deleteServer = (id: string) => {
    setServers(servers.filter(s => s.id !== id));
    toast.success('–°–µ—Ä–≤–µ—Ä —É–¥–∞–ª—ë–Ω');
  };

  const getStatusColor = (status: Server['status']) => {
    switch (status) {
      case 'online': return 'bg-primary text-primary-foreground';
      case 'offline': return 'bg-destructive text-destructive-foreground';
      case 'starting': return 'bg-accent text-accent-foreground';
    }
  };

  const getStatusText = (status: Server['status']) => {
    switch (status) {
      case 'online': return '–†–∞–±–æ—Ç–∞–µ—Ç';
      case 'offline': return '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
      case 'starting': return '–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è';
    }
  };

  const copyIpAddress = (ip: string) => {
    navigator.clipboard.writeText(ip);
    toast.success('IP –∞–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
  };

  const openConsole = (serverId: string) => {
    setCurrentServerId(serverId);
    setConsoleOpen(true);
  };

  const executeCommand = () => {
    if (!consoleCommand.trim()) return;
    
    const newLog = [...consoleLog];
    newLog.push(`> ${consoleCommand}`);
    
    if (consoleCommand === 'help') {
      newLog.push('[Server] Available commands: stop, list, say, tp, gamemode');
    } else if (consoleCommand === 'list') {
      newLog.push('[Server] Online players: 3/2999');
    } else if (consoleCommand.startsWith('say ')) {
      const message = consoleCommand.substring(4);
      newLog.push(`[Server] Broadcast: ${message}`);
    } else {
      newLog.push('[Server] Command executed');
    }
    
    setConsoleLog(newLog);
    setConsoleCommand('');
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      executeCommand();
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-background to-muted">
      <div className="container mx-auto px-4 py-8">
        <header className="text-center mb-12 animate-fade-in">
          <div className="flex items-center justify-center gap-4 mb-6">
            <div className="text-6xl animate-float">üß±</div>
            <h1 className="text-4xl md:text-6xl font-pixel text-primary mb-2">
              MineCraft Host
            </h1>
          </div>
          <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
            –°–æ–∑–¥–∞–π —Å–≤–æ–π Minecraft —Å–µ—Ä–≤–µ—Ä –∑–∞ –æ–¥–Ω—É —Å–µ–∫—É–Ω–¥—É –∏ –∏–≥—Ä–∞–π —Å –¥—Ä—É–∑—å—è–º–∏ –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!
          </p>
        </header>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-12">
          <Card className="pixel-corners minecraft-shadow hover:shadow-lg transition-all">
            <CardHeader>
              <div className="text-4xl mb-2">‚ö°</div>
              <CardTitle className="font-pixel text-lg">–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">
                –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
              </p>
            </CardContent>
          </Card>

          <Card className="pixel-corners minecraft-shadow hover:shadow-lg transition-all">
            <CardHeader>
              <div className="text-4xl mb-2">üéÅ</div>
              <CardTitle className="font-pixel text-lg">–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">
                –ù–∞—á–Ω–∏ –∏–≥—Ä–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –∞–ø–≥—Ä–µ–π–¥ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
              </p>
            </CardContent>
          </Card>

          <Card className="pixel-corners minecraft-shadow hover:shadow-lg transition-all">
            <CardHeader>
              <div className="text-4xl mb-2">üõ°Ô∏è</div>
              <CardTitle className="font-pixel text-lg">–ó–∞—â–∏—Ç–∞ 24/7</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">
                –ó–∞—â–∏—Ç–∞ –æ—Ç DDoS –∞—Ç–∞–∫ –∏ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ
              </p>
            </CardContent>
          </Card>
        </div>

        <Tabs defaultValue="create" className="max-w-4xl mx-auto">
          <TabsList className="grid w-full grid-cols-2 mb-8">
            <TabsTrigger value="create" className="font-pixel text-xs md:text-sm">
              <Icon name="Plus" className="mr-2 h-4 w-4" />
              –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
            </TabsTrigger>
            <TabsTrigger value="servers" className="font-pixel text-xs md:text-sm">
              <Icon name="Server" className="mr-2 h-4 w-4" />
              –ú–æ–∏ —Å–µ—Ä–≤–µ—Ä—ã ({servers.length})
            </TabsTrigger>
          </TabsList>

          <TabsContent value="create">
            <Card className="pixel-corners minecraft-shadow">
              <CardHeader>
                <CardTitle className="font-pixel text-xl">–ù–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä</CardTitle>
                <CardDescription>
                  –ó–∞–ø–æ–ª–Ω–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-2">
                  <label className="text-sm font-medium">–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞</label>
                  <Input
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–µ—Ä–≤–µ—Ä –≤—ã–∂–∏–≤–∞–Ω–∏—è"
                    value={serverName}
                    onChange={(e) => setServerName(e.target.value)}
                    className="pixel-corners"
                  />
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">–í–µ—Ä—Å–∏—è Minecraft</label>
                  <Select value={selectedVersion} onValueChange={setSelectedVersion}>
                    <SelectTrigger className="pixel-corners">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="1.20.4">1.20.4 (–ø–æ—Å–ª–µ–¥–Ω—è—è)</SelectItem>
                      <SelectItem value="1.20.1">1.20.1</SelectItem>
                      <SelectItem value="1.19.4">1.19.4</SelectItem>
                      <SelectItem value="1.18.2">1.18.2</SelectItem>
                      <SelectItem value="1.16.5">1.16.5</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">–°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</label>
                  <Select value={selectedBuild} onValueChange={setSelectedBuild}>
                    <SelectTrigger className="pixel-corners">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Vanilla">Vanilla (—á–∏—Å—Ç—ã–π)</SelectItem>
                      <SelectItem value="Spigot">Spigot</SelectItem>
                      <SelectItem value="Paper">Paper</SelectItem>
                      <SelectItem value="Forge">Forge (–º–æ–¥—ã)</SelectItem>
                      <SelectItem value="Fabric">Fabric (–º–æ–¥—ã)</SelectItem>
                      <SelectItem value="Purpur">Purpur</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="bg-muted p-4 rounded-lg pixel-corners">
                  <h3 className="font-pixel text-xs mb-3">–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –≤–∫–ª—é—á–∞–µ—Ç:</h3>
                  <ul className="space-y-2 text-sm">
                    <li className="flex items-start gap-2">
                      <Icon name="Check" className="h-4 w-4 text-primary mt-0.5" />
                      <span>–î–æ 2999 –∏–≥—Ä–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ</span>
                    </li>
                    <li className="flex items-start gap-2">
                      <Icon name="Check" className="h-4 w-4 text-primary mt-0.5" />
                      <span>2 –ì–ë –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏</span>
                    </li>
                    <li className="flex items-start gap-2">
                      <Icon name="Check" className="h-4 w-4 text-primary mt-0.5" />
                      <span>–ó–∞—â–∏—Ç–∞ –æ—Ç DDoS –∞—Ç–∞–∫</span>
                    </li>
                    <li className="flex items-start gap-2">
                      <Icon name="Check" className="h-4 w-4 text-primary mt-0.5" />
                      <span>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã</span>
                    </li>
                    <li className="flex items-start gap-2">
                      <Icon name="Check" className="h-4 w-4 text-primary mt-0.5" />
                      <span>24/7 –æ–Ω–ª–∞–π–Ω —Å–µ—Ä–≤–µ—Ä–∞</span>
                    </li>
                    <li className="flex items-start gap-2">
                      <Icon name="Check" className="h-4 w-4 text-primary mt-0.5" />
                      <span>–î–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Å–æ–ª–∏</span>
                    </li>
                  </ul>
                </div>

                <Button 
                  onClick={createServer} 
                  size="lg" 
                  className="w-full font-pixel pixel-corners minecraft-shadow hover:scale-105 transition-transform"
                >
                  <Icon name="Rocket" className="mr-2 h-5 w-5" />
                  –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
                </Button>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="servers">
            <div className="space-y-4">
              {servers.length === 0 ? (
                <Card className="pixel-corners minecraft-shadow">
                  <CardContent className="py-12 text-center">
                    <div className="text-6xl mb-4">üì¶</div>
                    <p className="text-muted-foreground mb-4">–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤</p>
                    <Button variant="outline" className="pixel-corners">
                      –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å–µ—Ä–≤–µ—Ä
                    </Button>
                  </CardContent>
                </Card>
              ) : (
                servers.map((server) => (
                  <Card key={server.id} className="pixel-corners minecraft-shadow hover:shadow-lg transition-all">
                    <CardHeader>
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-3 mb-2">
                            <CardTitle className="font-pixel text-lg">{server.name}</CardTitle>
                            <Badge className={`${getStatusColor(server.status)} pixel-corners text-xs`}>
                              {getStatusText(server.status)}
                            </Badge>
                          </div>
                          <CardDescription>–í–µ—Ä—Å–∏—è {server.version} ‚Ä¢ {server.build} ‚Ä¢ {server.plan}</CardDescription>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="flex items-center justify-between mb-4">
                        <div className="flex items-center gap-2 text-sm">
                          <Icon name="Users" className="h-4 w-4 text-primary" />
                          <span>{server.players}/{server.maxPlayers} –∏–≥—Ä–æ–∫–æ–≤</span>
                        </div>
                      </div>
                      
                      {server.status === 'online' && (
                        <div className="bg-muted p-3 rounded-lg pixel-corners mb-4">
                          <div className="flex items-center justify-between">
                            <div>
                              <p className="text-xs text-muted-foreground mb-1">IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:</p>
                              <p className="font-mono font-semibold">{server.ip}</p>
                            </div>
                            <Button 
                              variant="default" 
                              size="sm" 
                              className="pixel-corners minecraft-shadow"
                              onClick={() => copyIpAddress(server.ip)}
                            >
                              <Icon name="Copy" className="mr-2 h-4 w-4" />
                              –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                            </Button>
                          </div>
                        </div>
                      )}
                      
                      <div className="flex gap-2">
                        {server.status === 'online' && (
                          <>
                            <Button 
                              variant="outline" 
                              size="sm" 
                              className="pixel-corners flex-1"
                              onClick={() => openConsole(server.id)}
                            >
                              <Icon name="Terminal" className="mr-2 h-4 w-4" />
                              –ö–æ–Ω—Å–æ–ª—å
                            </Button>
                            <Button variant="outline" size="sm" className="pixel-corners flex-1">
                              <Icon name="Settings" className="mr-2 h-4 w-4" />
                              –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                            </Button>
                          </>
                        )}
                        <Button 
                          variant="destructive" 
                          size="sm" 
                          className="pixel-corners"
                          onClick={() => deleteServer(server.id)}
                        >
                          <Icon name="Trash2" className="h-4 w-4" />
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                ))
              )}
            </div>
          </TabsContent>
        </Tabs>

        <footer className="mt-16 text-center text-sm text-muted-foreground">
          <p>MineCraft Host ‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π —Å–µ—Ä–≤–µ—Ä—ã –∏ –∏–≥—Ä–∞–π —Å –¥—Ä—É–∑—å—è–º–∏ üéÆ</p>
        </footer>
      </div>

      <Dialog open={consoleOpen} onOpenChange={setConsoleOpen}>
        <DialogContent className="max-w-3xl pixel-corners">
          <DialogHeader>
            <DialogTitle className="font-pixel text-xl flex items-center gap-2">
              <Icon name="Terminal" className="h-5 w-5" />
              –ö–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞
            </DialogTitle>
            <DialogDescription>
              –£–ø—Ä–∞–≤–ª—è–π —Å–µ—Ä–≤–µ—Ä–æ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            <ScrollArea className="h-[400px] w-full rounded-lg border bg-black p-4">
              <div className="font-mono text-sm space-y-1">
                {consoleLog.map((line, index) => (
                  <div 
                    key={index} 
                    className={`${
                      line.startsWith('>')
                        ? 'text-primary font-semibold'
                        : line.includes('ERROR')
                        ? 'text-destructive'
                        : line.includes('SUCCESS') || line.includes('started')
                        ? 'text-primary'
                        : 'text-green-400'
                    }`}
                  >
                    {line}
                  </div>
                ))}
              </div>
            </ScrollArea>
            
            <div className="flex gap-2">
              <Input
                placeholder="–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: list, help, say –ø—Ä–∏–≤–µ—Ç)..."
                value={consoleCommand}
                onChange={(e) => setConsoleCommand(e.target.value)}
                onKeyPress={handleKeyPress}
                className="font-mono pixel-corners"
              />
              <Button 
                onClick={executeCommand}
                className="pixel-corners minecraft-shadow"
              >
                <Icon name="Send" className="h-4 w-4" />
              </Button>
            </div>

            <div className="bg-muted p-3 rounded-lg pixel-corners">
              <p className="text-xs text-muted-foreground mb-2 font-pixel">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</p>
              <div className="flex flex-wrap gap-2">
                <Button 
                  variant="outline" 
                  size="sm" 
                  className="pixel-corners text-xs"
                  onClick={() => setConsoleCommand('list')}
                >
                  list
                </Button>
                <Button 
                  variant="outline" 
                  size="sm" 
                  className="pixel-corners text-xs"
                  onClick={() => setConsoleCommand('help')}
                >
                  help
                </Button>
                <Button 
                  variant="outline" 
                  size="sm" 
                  className="pixel-corners text-xs"
                  onClick={() => setConsoleCommand('say –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')}
                >
                  say
                </Button>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default Index;